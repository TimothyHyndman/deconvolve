% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DeconErrSymPmfToPdf.R
\name{DeconErrSymPmfToPdf}
\alias{DeconErrSymPmfToPdf}
\title{Create Probability Density Function from Probability Mass Function}
\usage{
DeconErrSymPmfToPdf(X.pmf, W, phi.W, xx, phiK = NULL, muK2 = 6,
  t = seq(-1, 1, 2e-04), rescale = FALSE, h = NULL)
}
\arguments{
\item{X.pmf}{A list with parts "support" and "probweights"}

\item{W}{A vector of the univariate contaminated data.}

\item{phi.W}{A list with parts "complex", "re", "im", "norm" and "t.values" 
containing phi.W, Re(phi.W), Im(phi.W), Norm(phi.W) and the t values on which
they were calculated respectively.}

\item{xx}{A vector of x values on which to compute the density.}

\item{phiK}{A function giving the fourier transform of the kernel. 
If supplied, \code{muK2}, \code{RK}, and \code{tt} must also be supplied. If 
not supplied it defaults to \eqn{(1 - t^2)^3} on the interval \eqn{[-1,1]}.}

\item{muK2}{The second moment of the kernel, i.e. \eqn{\int x^2 K(x) dx}.}

\item{t}{A vector of evenly spaced t values on which to approximate the 
integrals in the Fourier domain. If phiK is compactly supported, the first 
and last elements of \code{tt} must be the lower and upper bound of the 
support of phiK. If phiK is not compactly supported, the first and last 
elements of \code{tt} must be large enough for your discretisation of the 
integrals to be accurate.}

\item{rescale}{If \code{TRUE}, estimator is rescaled so that it 
integrates to 1. Rescaling requires \code{xx} to be a fine grid of equispaced 
\eqn{x} values that covers the whole range of \eqn{x}-values where the 
estimated density is significantly non zero.}

\item{h}{The bandwidth to use. If \code{NULL}, a bandwidth will be calculated
using an appropriate plug-in estimator.}
}
\value{
A vector containing the deconvolution KDE evaluated at each point in 
\code{xx}.
}
\description{
Takes the output of DeconErrSymPmf along with the contaminated data, W, and
uses a kernel estimator to find an estimate for the probability density 
function of X.
}
\details{
PUT DETAILS HERE
}
\section{Authors}{

Aurore Delaigle
}

\section{References}{

Delaigle, A. and Hall, P. (2016). Methodology for non-parametric 
deconvolution when the error distribution is unknown. \emph{Journal of the 
Royal Statistical Society: Series B (Statistical Methodology)}, 78, 1, 
231-252.
}

\examples{
# Generate Test Data
W <- GenerateTestData(n = 500)

# Deconvolve
out <- DeconErrSymPmf(W)

phi.W <- out$phi.W

# Convert to Probability Density
xx <- seq(min(W), max(W), length.out = 100)
fX <- DeconErrSymPmfToPdf(out, W, phi.W, xx)
}
