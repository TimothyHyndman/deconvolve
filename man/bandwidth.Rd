% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bandwidth.R
\name{bandwidth}
\alias{bandwidth}
\title{Bandwidth Selectors for Deconvolution Kernel Density Estimation}
\usage{
bandwidth(W, W2 = NULL, errortype = NULL, sd_U = NULL, phiU = NULL,
  Y = NULL, algorithm = c("PI", "CV", "SIMEX"), n_cores = NULL,
  kernel_type = c("default", "normal", "sinc"), seed = NULL,
  use_alt_SIMEX_rep_opt = FALSE)
}
\arguments{
\item{W}{A vector of the univariate contaminated data.}

\item{W2}{A vector of replicate measurements. If supplied, then the error 
will be estimated using replicates.}

\item{errortype}{The distribution type of \eqn{U}. Either "laplace" or 
"normal". If you define the errors this way then you must also provide 
\code{sd_U} but should not provide \code{phiU}. Argument is case-insensitive
and partially matched.}

\item{sd_U}{The standard deviations of \eqn{U}. A single value for
homoscedastic errors and a vector having the same length as \code{W} for
heteroscedastic errors.}

\item{phiU}{A function giving the characteristic function of \eqn{U}. A 
single value for homoscedastic errors and a vector having the same length as 
\code{W} for heteroscedastic errors. If you define the errors this way then 
you should not provide \code{errortype}.}

\item{Y}{A vector of the univariate dependent data. Only required for 'SIMEX'
algorithm.}

\item{algorithm}{One of \code{"PI"} for plug-in estimator, \code{"CV"} for
cross-validation estimator or \code{"SIMEX"}. If \code{"CV"} then the errors 
must be homoscedastic.}

\item{n_cores}{Number of cores to use when using SIMEX algorithm. If
\code{NULL}, the number of cores to use will be automatically detected.}

\item{kernel_type}{The deconvolution kernel to use. The default kernel has
characteristic function \eqn{(1-t^2)^3}.}

\item{seed}{Set seed for SIMEX. Allows for reproducible results using SIMEX.}

\item{use_alt_SIMEX_rep_opt}{Only used with SIMEX using replicates. If 
\code{TRUE}, performs SIMEX on \eqn{W = (W1 + W2)/2} and samples \eqn{U*} 
from (W1 - W2). The default performs SIMEX on \eqn{W = (W1, W2)} and 
and samples \eqn{U*} from \eqn{(W1 - W2)/\sqrt 2}.}
}
\value{
The bandwidth estimator. If using 'SIMEX' algorithm then returns a
list containing the bandwidth 'h' and ridge parameter 'rho'.
}
\description{
Computes a bandwidth for use in deconvolution kernel density estimation of
\eqn{X} from data \eqn{W = X + U} when the distribution of \eqn{U} is known,
unknown, or estimated from replicates, \eqn{W_2 = X + U_2}. If 'SIMEX' 
algorithm used, computes a bandwidth for use in deconvolution regression of 
data \eqn{(W, Y)}  where \eqn{Y = g(X) + V} and \eqn{W = X + U}.
}
\details{
The function \code{bandwidth} chooses from one of six different methods
depending on how the error distribution is defined and which algorithm is
selected.

\strong{PI for Homoscedastic Error:} If \code{algorithm = "PI"} and the errors
are defined by either a single function \code{phiU}, or a single value
\code{sd_U} along with its \code{errortype}, then the method used is as
described in Delaigle and Gijbels 2002, and Delaigle and Gijbels 2004.

\strong{PI for Heteroscedastic Error:} If \code{algorithm = "PI"} and the
errors are defined by a either a vector of functions \code{phiU}, or a vector
\code{sd_U} along with its \code{errortype} then the method used is as
described in Delaigle and Meister 2008.

\strong{PI for Replicates:} If \code{algorithm = "PI"} and a replicate 
vector \code{W2} is supplied, then the error is estimated using replicates.

\strong{PI for Unknown Error:} If \code{algorithm = "PI"} and the errors are
not supplied, then the error is estimated using the method described in
Delaigle and Hall 2016 and then the bandwidth is calculated using the method
described in Delaigle and Gijbels 2002, and Delaigle and Gijbels 2004.

\strong{CV:} If \code{algorithm = "CV"} then the method used is as described
in Stefanski and Carroll 1990, and Delaigle and Gijbels 2004.

\strong{SIMEX:} If \code{algorithm = "SIMEX"} then the method used is as
described in Delaigle and Hall 2008.

\strong{SIMEX for Replicates:} If \code{algorithm = "SIMEX"} and a 
replicate vector \code{W2} is supplied, then \eqn{phi_U} is calculated using 
replicates and SIMEX is performed as according to 
\code{use_alt_SIMEX_rep_opt}.
}
\section{References}{

Delaigle, A. and Meister, A. (2008). Density estimation with heteroscedastic
error. \emph{Bernoulli}, 14, 2, 562-579.

Delaigle, A. and Gijbels, I. (2002). Estimation of integrated squared density
derivatives from a contaminated sample. \emph{Journal of the Royal
Statistical Society, B}, 64, 4, 869-886.

Delaigle, A. and Gijbels, I. (2004). Practical bandwidth selection in
deconvolution kernel density estimation. \emph{Computational Statistics and
Data Analysis}, 45, 2, 249 - 267.

Stefanski, L. and Carroll, R.J. (1990). Deconvoluting kernel density
estimators. \emph{Statistics}, 21, 2, 169-184.

Delaigle, A. and Hall, P. (2008). Using SIMEX for smoothing-parameter choice
in errors-in-variables problems. \emph{Journal of the American Statistical
Association}, 103, 481, 280-287

Delaigle, A., Hall, P., and Meister, A. (2008). On Deconvolution with  
repeated measurements. \emph{Annals of Statistics}, 36, 665-685 

Delaigle, A. and Hall, P. (2016). Methodology for non-parametric
deconvolution when the error distribution is unknown. \emph{Journal of the
Royal Statistical Society: Series B (Statistical Methodology)}, 78, 1,
231-252.
}

\examples{
\dontrun{
# PI bandwidth with error estimated from replicates ----------------------------
W1 <- (framingham$SBP21 + framingham$SBP22)/2
W2 <- (framingham$SBP31 + framingham$SBP32)/2

bw <- bandwidth(W1, W2)

# CV bandwidth -----------------------------------------------------------------
n <- 50
sd_X <- 1
sd_U <- 0.2
W <- GenerateTestData(n, sd_X, sd_U, dist_type = "mix", error_type = "norm")

bw <- bandwidth(W, errortype = "norm", sd_U = sd_U, algorithm = "CV")

# PI bandwidth with heteroscedastic errors -------------------------------------
sd_U_vec <- 0.6 * sqrt(1 + (1:n) / n) * sqrt(0.5)
W <- GenerateTestData(n, sd_X, sd_U_vec, dist_type = "mix", error_type = "norm")

bw <- bandwidth(W, errortype = "norm", sd_U = sd_U_vec)

# SIMEX bandwidth --------------------------------------------------------------
data <- GenerateTestData(n, sd_X, sd_U, dist_type = "mix", error_type = "norm", 
						 create_Y = TRUE)
output <- bandwidth(data$W, errortype = "norm", sd_U = sd_U, Y = data$Y, 
					algorithm = "SIMEX", n_cores = 2)
bw <- output$h

# PI bandwidth with heteroscedastic errors supplied using phiU -----------------
sd_U_vec <- 0.6 * sqrt(1 + (1:n) / n) * sqrt(0.5)
phiU <- c()
for (sigUk in sd_U_vec){
	phiUk <- function(tt) {
		exp(-sigUk^2 * tt^2 / 2)
	}
	phiU <- c(phiU, phiUk)
}

W <- GenerateTestData(n, sd_X, sd_U_vec, dist_type = "mix", error_type = "norm")

bw <- bandwidth(W, sd_U = sd_U_vec, phiU = phiU)
}
}
\author{
Aurore Delaigle, Timothy Hyndman, Tianying Wang
}
