% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bandwidth.R
\name{bandwidth}
\alias{bandwidth}
\title{Bandwidth Selectors for Deconvolution Kernel Density Estimation}
\usage{
bandwidth(W1, W2 = NULL, errortype = NULL, sd_U = NULL,
  phiU = NULL, Y = NULL, algorithm = c("PI", "CV", "SIMEX"),
  n_cores = NULL, kernel_type = c("default", "normal", "sinc"),
  seed = NULL, use_alt_SIMEX_rep_opt = FALSE, het_replicates = FALSE)
}
\arguments{
\item{W1}{A vector of size n containing the univariate contaminated data.}

\item{W2}{(optional) A vector of size n containing replicate measurements for the same 
n individuals (in the same order) as W1. If supplied, then the error distribution
will be estimated using the replicates only if \code{phiU}, and both of \code{errortype}
and \code{sd_U} are not provided.}

\item{errortype}{A single string giving the distribution of \eqn{U}, either "laplace" or "normal". 
If you define the error distribution this way then you must also provide 
\code{sd_U} but should not provide \code{phiU}. Argument is case-insensitive
and partially matched.}

\item{sd_U}{The standard deviations of \eqn{U}. A single value for
homoscedastic errors and a vector having the same length as \code{W1} for
heteroscedastic errors.}

\item{phiU}{Function(s) giving the characteristic function of the errors. A 
single real valued function for homoscedastic errors and a vector of \eqn{n} real valued functions 
for heteroscedastic errors. If you define the errors this way then you
should not provide \code{errortype}.}

\item{Y}{A vector of the univariate dependent data (used in the regression setting). 
Only required for 'SIMEX' algorithm.}

\item{algorithm}{One of \code{"PI"} for plug-in bandwidth, \code{"CV"} for
cross-validation bandwidth or \code{"SIMEX"}. If \code{"CV"} then the errors 
must be homoscedastic. \code{"PI"} can only be used if your kernel has finite 
second order moment and finite squared integral.}

\item{n_cores}{Number of cores to use when using SIMEX algorithm. If
\code{NULL}, the number of cores to use will be automatically detected.}

\item{kernel_type}{A string giving the kernel K to use when computing the estimator of the 
density of \eqn{X}. Either "default", "normal", or "sinc". The default kernel has characteristic function 
\eqn{(1-t^2)^3} for \eqn{t \in [-1,1]}. The normal kernel is the standard normal density.
The sinc kernel has characteristic function equal to 1 for \eqn{t \in [-1,1]}}

\item{seed}{Set seed for SIMEX. Allows for reproducible results using SIMEX.}

\item{use_alt_SIMEX_rep_opt}{Only used with SIMEX based on replicates. If 
\code{TRUE}, performs SIMEX on \eqn{W = (W1 + W2)/2} and samples \eqn{U*} 
from \eqn{(W1 - W2)}. The default performs SIMEX on \eqn{W = (W1, W2)} and 
and samples \eqn{U*} from \eqn{(W1 - W2)/\sqrt 2}.}

\item{het_replicates}{If \code{TRUE}, then the errors are not assumed to be 
homoscedastic and the code for heteroscedastic errors is used. Only applicable 
if \code{W2} is supplied.}
}
\value{
A data-driven bandwidth. If using 'SIMEX' algorithm then returns a
list containing the bandwidth 'h' and ridge parameter 'rho'.
}
\description{
Computes a bandwidth for the deconvolution kernel estimator of the density of
\eqn{X} from data \eqn{W_{i1} = X_i + U_{i1}, i=1,...,n} when the distribution 
of \eqn{U_i} is known, unknown, or estimated from replicates, \eqn{W_{i1} = X_i + U_{i1}}
and \eqn{W_{i2} = X_i + U_{i2}}. If 'SIMEX' algorithm used, computes a bandwidth for use in
deconvolution regression of data \eqn{(W_i, Y_i)}  where \eqn{Y_i = g(X_i) + V_i} and \eqn{W_i = X_i + U_i}.
}
\details{
The function \code{bandwidth} chooses from one of six different methods
depending on how the error distribution is defined/computed and which 
algorithm is selected.

\strong{PI for known homoscedastic error distribution:} If \code{algorithm = "PI"} and the error
distribution is defined by either a single function \code{phiU}, or a single value
\code{sd_U} along with its \code{errortype}, then the method used is as
described in Delaigle and Gijbels (2002), and Delaigle and Gijbels (2004).

\strong{PI for known heteroscedastic error distributions:} If \code{algorithm = "PI"} and the
error distributions are defined by a either a vector of functions \code{phiU}, or a vector
\code{sd_U} along with its (unique) \code{errortype} then the method used is as
described in Delaigle and Meister (2008).

\strong{PI for unknown homoscedastic error distribution estimated from replicates:} 
If \code{algorithm = "PI"} and a replicate vector \code{W2} is supplied, then 
the error distribution is estimated using replicates as in Delaigle, Hall and Meister (2008).

\strong{PI for unknown homoscedastic error distribution estimated without replicates:} 
If \code{algorithm = "PI"} and the errors are not supplied, then the error distribution 
is estimated using the method described in Delaigle and Hall (2016) and then the bandwidth 
is calculated using the method described in Delaigle and Gijbels (2002) and Delaigle and 
Gijbels (2004) except that the error distribution is replaced by its estimator.

\strong{CV:} If \code{algorithm = "CV"} then the method used is the corss-validation described
in Stefanski and Carroll (1990) and Delaigle and Gijbels (2004).

\strong{SIMEX:} If \code{algorithm = "SIMEX"} then the method used is the SIMEX procedure
described in Delaigle and Hall (2008).

\strong{SIMEX for Replicates:} If \code{algorithm = "SIMEX"} and a 
replicate vector \code{W2} is supplied, then \eqn{phi_U} is calculated using 
replicates and SIMEX is performed as according to 
\code{use_alt_SIMEX_rep_opt}.
}
\section{References}{


Delaigle, A. and Gijbels, I. (2002). Estimation of integrated squared density
derivatives from a contaminated sample. \emph{Journal of the Royal
Statistical Society, B}, 64, 4, 869-886.

Delaigle, A. and Gijbels, I. (2004). Practical bandwidth selection in
deconvolution kernel density estimation. \emph{Computational Statistics and
Data Analysis}, 45, 2, 249 - 267.

Delaigle, A. and Hall, P. (2008). Using SIMEX for smoothing-parameter choice
in errors-in-variables problems. \emph{Journal of the American Statistical
Association}, 103, 481, 280-287

Delaigle, A. and Hall, P. (2016). Methodology for non-parametric
deconvolution when the error distribution is unknown. \emph{Journal of the
Royal Statistical Society: Series B (Statistical Methodology)}, 78, 1,
231-252.

Delaigle, A., Hall, P., and Meister, A. (2008). On Deconvolution with  
repeated measurements. \emph{Annals of Statistics}, 36, 665-685 

Delaigle, A. and Meister, A. (2008). Density estimation with heteroscedastic
error. \emph{Bernoulli}, 14, 2, 562-579.

Stefanski, L. and Carroll, R.J. (1990). Deconvoluting kernel density
estimators. \emph{Statistics}, 21, 2, 169-184.
}

\examples{
\dontrun{
# PI bandwidth with error estimated from replicates ----------------------------
W1 <- (framingham$SBP21 + framingham$SBP22)/2
W2 <- (framingham$SBP31 + framingham$SBP32)/2

bw <- bandwidth(W1, W2)


# Generate homoscedastic data --------------------------------------------------
n <- 50
X <- stats::rchisq(n, 3)

sd_U = 0.2
U <- stats::rnorm(n, sd = sd_U)

W <- X + U

# CV bandwidth -----------------------------------------------------------------
bw <- bandwidth(W, errortype = "norm", sd_U = sd_U, algorithm = "CV")

# SIMEX bandwidth --------------------------------------------------------------
Y <- 2*X

output <- bandwidth(W, errortype = "norm", sd_U = sd_U, Y = Y, 
					algorithm = "SIMEX", n_cores = 2)
bw <- output$h
rho <- output$rho

# Generate heteroscedastic data ------------------------------------------------
n <- 50
X <- stats::rchisq(n, 3)

sd_U_vec <- 0.6 * sqrt(1 + (1:n) / n) * sqrt(0.5)
U <- c()
for (sigUk in sd_U_vec){
	U <- c(U, stats::rnorm(1, 0, sigUk))
}

W <- X + U

# PI bandwidth with heteroscedastic errors -------------------------------------
bw <- bandwidth(W, errortype = "norm", sd_U = sd_U_vec)

# PI bandwidth with heteroscedastic errors supplied using phiU -----------------
phiU <- c()
for (sigUk in sd_U_vec){
	phiUk <- function(tt) {
		exp(-sigUk^2 * tt^2 / 2)
	}
	phiU <- c(phiU, phiUk)
}

bw <- bandwidth(W, sd_U = sd_U_vec, phiU = phiU)
}
}
\author{
Aurore Delaigle, Timothy Hyndman, Tianying Wang
}
