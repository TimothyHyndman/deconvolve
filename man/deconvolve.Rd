% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deconvolve.R
\name{deconvolve}
\alias{deconvolve}
\title{Deconvolution Kernel Density Estimator}
\usage{
deconvolve(W, xx, errortype = NULL, sigU = NULL, phiU = NULL, bw = NULL,
  rescale = FALSE, pmf = FALSE, kernel_type = "default", m = 20)
}
\arguments{
\item{W}{A vector of the univariate contaminated data.}

\item{xx}{A vector of x values on which to compute the density. This can be
missing if \code{pmf = TRUE}.}

\item{errortype}{The distribution type of \eqn{U}. Either "Lap" for Laplace 
errors or "norm" for normal errors. If you define the errors this way then 
you must also provide \code{sigU} but should not provide \code{phiU}.}

\item{sigU}{The standard deviations of \eqn{U}. A single value for
homoscedastic errors and a vector having the same length as \code{W} for 
heteroscedastic errors. This does not need to be provided if you define your
error using phiU and provide \code{bw}.}

\item{phiU}{A function giving the characteristic function of \eqn{U}. A 
single value for homoscedastic errors and a vector having the same length as 
\code{W} for heteroscedastic errors. If you define the errors this way then 
you should not provide \code{errortype}.}

\item{bw}{The bandwidth to use. If \code{NULL}, a bandwidth will be
calculated using an appropriate plug-in estimator.}

\item{rescale}{If \code{TRUE}, estimator is rescaled so that it 
integrates to 1. Rescaling requires \code{xx} to be a fine grid of equispaced 
\eqn{x} values that covers the whole range of \eqn{x}-values where the 
estimated density is significantly non zero.}

\item{pmf}{If \code{TRUE}, returns a probability mass function instead of a 
density as the estimator. This is quicker than estimating a density. To use
this option, the errors must not be provided.}

\item{kernel_type}{The deconvolution kernel to use. The default kernel has
characteristic function \eqn{(1-t^2)^3}.}

\item{m}{The number of point masses to use to estimate the distribution of 
\eqn{X} when the error is not supplied.}
}
\value{
An object of class "\code{deconvolve}".

The function \code{plot} produces a plot of the deconvolution KDE.

An object of class "\code{deconvolve}" is a list containing at least some of
the elements:
\item{W}{The original contaminated data}
\item{x}{The values on which the deconvolution KDE is evaluated.}
\item{pdf}{A vector containing the deconvolution KDE evaluated at each point 
in \code{x}}
\item{support}{The support of the pmf found when the errors are assumed
symmetric}
\item{probweights}{The probability masses of the pmf found when the errors
are assumed symmetric}
}
\description{
Computes the deconvolution kernel density estimator (KDE) of \eqn{X} from 
data \eqn{W = X + U} when the distribution of \eqn{U} is known,
heteroscedastic, or symmetric.
}
\details{
The function \code{deconvolve} chooses from one of three different methods 
depending on how the error distribution is defined.

\strong{Symmetric Error:} If neither \code{errortype} or \code{phiU} are 
supplied then the error is assumed symmetric and the deconvolution method is 
based on the method described in Delaigle and Hall 2016.

\strong{Homoscedastic Error:} If the errors are defined by either a single 
function \code{phiU}, or a single value \code{sigU} along with its 
\code{errortype} then the method used is as described in Stefanski and
Carroll 1990.

\strong{Heteroscedastic Errors:} If the errors are defined by a either a 
vector of functions \code{phiU}, or a vector \code{sigU} along with its 
\code{errortype} then the method used is as described in Delaigle and 
Meister 2008.

Errors can be defined by either a distribution type (\code{errortype}) along 
with the standard deviation(s) (\code{sigU}), or by the characteric 
function(s) of the errors (\code{phiU}).
}
\section{Warnings}{

\itemize{
\item The arguments \code{phiK}, \code{muK2}, \code{RK}, and \code{tt} must
	all be calculated from the same kernel. If you change one of these, you must
	also change the rest to match.
\item If you supply your own bandwidth, then you should ensure that the
	kernel used here matches the one you used to calculate your bandwidth.
\item The DKDE can also be computed using the Fast Fourier Transform, which 
	is a bit more complex. See Delaigle and Gijbels 2007. However if the grid of 
	t-values is fine enough, the estimator can simply be computed like here 
	without having problems with oscillations.
}
}

\section{References}{

Stefanski, L.A. and Carroll, R.J. (1990). Deconvolving kernel density
estimators. \emph{Statistics}, 21, 2, 169-184.

Delaigle, A. and Meister, A. (2008). Density estimation with heteroscedastic 
error. \emph{Bernoulli}, 14, 2, 562-579.

Delaigle, A. and Hall, P. (2016). Methodology for non-parametric 
deconvolution when the error distribution is unknown. \emph{Journal of the 
Royal Statistical Society: Series B (Statistical Methodology)}, 78, 1, 
231-252.

Delaigle, A. and Gijbels, I. (2007). Frequent problems in calculating 
integrals and optimizing objective functions: a case study in density 
deconvolution. \emph{Statistics and Computing}, 17, 349-355.
}

\examples{
# Symmetric Errors -------------------------------------------------------------
n <- 200
W <- GenerateTestData(n, dist_type = "chi", error_type = "norm")
xx <- seq(min(W), max(W), length.out = 100)

d <- deconvolve(W, xx)
plot(d)
print(d)

# Symmetric Errors only returning PMF ------------------------------------------
d <- deconvolve(W, pmf = TRUE)
plot(d)
print(d)

# Homoscedastic Errors ---------------------------------------------------------
n <- 200
sigX <- 1
sigU <- 0.2
W <- GenerateTestData(n, sigX, sigU, dist_type = "mix", error_type = "norm")
xx <- seq(min(W), max(W), length.out = 100)

yy <- deconvolve(W, xx, errortype = "norm", sigU = sigU)

# Heteroscedastic Errors -------------------------------------------------------
n <- 200
sigX <- 1
sigU_vec <- 0.6 * sqrt(1 + (1:n) / n) * sqrt(0.5)
W <- GenerateTestData(n, sigX, sigU_vec, dist_type = "mix", error_type = "norm")
xx <- seq(min(W), max(W), length.out = 100)

yy <- deconvolve(W, xx, errortype = "norm", sigU = sigU_vec)

# Heteroscedastic Errors provided using a vector of phiUs ----------------------
n <- 200
sigX <- 1
sigU <- 0.6 * sqrt(1 + (1:n) / n) * sqrt(0.5)
W <- GenerateTestData(n, sigX, sigU, dist_type = "mix", error_type = "norm")
xx <- seq(min(W), max(W), length.out = 100)

# Calculate the characteristic functions of the errors
phiU_vec=c()
phiU <- function(k) {
	function(tt){
		exp(-sigU[k]^2 * tt^2 / 2)
	}
}
for(k in 1:n) {	
	# phiU <- function(tt,k) {
	# 	exp(-sigU[k]^2 * tt^2 / 2)
	# }
	phiU_vec <- c(phiU_vec, phiU(k))
}

yy <- deconvolve(W, xx, sigU = sigU, phiU = phiU_vec)
}
\author{
Aurore Delaigle, Timothy Hyndman, Tianying Wang
}
